@using HFDIncidents.Domain.Models
@using X.PagedList.Mvc
@using Jmelosegui.Mvc.GoogleMap
@using HFDIncidents.Web.ViewModels
@model SearchViewModel
@{
    ViewBag.Title = "Archive Search";

    ArchivedIncident header = null;
    SelectList itemsPerPageList = DefaultValues.ItemsPerPageList;
}

@using (Html.BeginForm("Search", "Home", FormMethod.Get, new { @id = "searchForm", @class = "form-horizontal" }))
{

    <div class="row">

        <div class="col-md-4">

            <div id="searchForm">

                <div class="form-group">
                    <label for="fromDate" class="control-label col-xs-4">Start Date:</label>
                    <div class="col-xs-8">
                        @Html.TextBoxFor(model => model.FromDate, new { @id = "fromDate", @class = "form-control", @Value = Model.FromDate.ToString("MM/dd/yyyy") })
                    </div>
                </div>

                <div class="form-group">
                    <label for="toDate" class="control-label col-xs-4">End Date:</label>
                    <div class="col-xs-8">
                        @Html.TextBoxFor(model => model.ToDate, new { @id = "toDate", @class = "form-control", @Value = Model.ToDate.ToString("MM/dd/yyyy") })
                    </div>
                </div>

                <div class="form-group">
                    <label for="foo" class="control-label col-xs-4">Incident Types:</label>
                    <div id="typesList" class="col-xs-8">
                        @Html.ListBoxFor(model => model.types, Model.IncidentTypes, new { size = 10 })
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-xs-offset-4 col-xs-8">
                        <button type="submit" id="submitButton" class="btn btn-primary">&nbsp;Search</button>
                    </div>
                </div>

            </div>

        </div>

        <div id="mapContainer" class="col-md-8">
            @{ Html.GoogleMap()
            .Name("map")
            .Width(0)
            .Height(400)
            .Center(c => c.Latitude(29.772315).Longitude(-95.37207))
            .Zoom(10)

.BindTo<ArchivedIncident, Marker>
                (Model.Incidents, mappings => mappings.For<ArchivedIncident>
                        (
                            binding => binding.ItemDataBound
                            (
                                (marker, incident) =>
                                {
                                    marker.Latitude = incident.Latitude;
                                    marker.Longitude = incident.Longitude;
                                    marker.Title = incident.IncidentType.Name;
                                    //marker.zIndex = incident.zIndex;
                                    //marker.Icon = new
                                    //    MarkerImage(String.Format("~/Images/flags/{0}",regionInfo.ImagePath)
                                    //                                , new Size(18, 12)
                                    //                                , new Point(0, 0)
                                    //                                , new Point(0, 12));
                                    //marker.Window = new InfoWindow(marker)
                                    //                {
                                    //                    Template =
                                    //                    {
                                    //                        Content = () =>
                                    //                            ViewContext.Writer.Write(incident.IncidentType.Name)
                                    //                    }
                                    //                };
                                }
                            )
                        )
                )
            .ApiKey(AppSettings.GoogleMapsKey)
            .Render();

            }
        </div>

    </div>
    <div id="resultsGrid" class="row">

        <table class="table table-striped table-bordered">
            <tr>
                <th>
                    @Html.DisplayNameFor(model => header.IncidentType.Name)
                </th>
                <th>
                    @Html.DisplayNameFor(model => header.CallTimeOpened)
                </th>
                <th>
                    @Html.DisplayNameFor(model => header.Address)
                </th>
                <th>
                    @Html.DisplayNameFor(model => header.CrossStreet)
                </th>
                <th>
                    @Html.DisplayNameFor(model => header.AlarmLevel)
                </th>
                <th>
                    @Html.DisplayNameFor(model => header.NumberOfUnits)
                </th>
                <th>
                    @if (Model != null)
                    {
                        <span>Items per Page</span>
                        @Html.DropDownList("ItemsPerPage", itemsPerPageList, new { @id = "ItemsPerPageList", onchange = "this.form.submit();" })
                    }
                </th>

            </tr>

            @foreach (var item in Model.Incidents)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.IncidentType.Name)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.CallTimeOpened)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Address)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.CrossStreet)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.AlarmLevel)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.NumberOfUnits)
                    </td>
                    <td>
                        @Html.ActionLink("Details", "Details", new { id = item.Id })
                    </td>
                </tr>
            }

        </table>

        @Html.HiddenFor(model => model.Page, new { @id = "pageNumberHidden" })

        <div id="pagerContainer">

            @Html.PagedListPager(Model.Incidents,
        page => Url.Action("Search", new { page = page }))

        </div>

        @if (Model != null && Model.Incidents.PageCount > 0)
        {
            <div>
                Page @(Model.Incidents.PageCount < Model.Incidents.PageNumber ? 0 : Model.Incidents.PageNumber) of @Model.Incidents.PageCount
            </div>
        }

    </div>

}

@section scripts
{
    <script>
        $(function () {
            $("#fromDate").datepicker();
            $("#toDate").datepicker();
        });
        $(function () {
            $("#pagerContainer a").click(function () {
                var url = this.href;
                var page = url.substring(url.indexOf("page=") + 5);
                if (!$.isNumeric(page)) {
                    return false;
                }
                $('#pageNumberHidden').val(page);
                $('#searchForm').submit();
                return false;
            });
            $("#submitButton").click(function () {
                $('#pageNumberHidden').val(1);
                return true;
            });
        });
    </script>

    @(Html.GoogleMap().ScriptRegistrar())
}